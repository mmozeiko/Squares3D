#
import os

#
p = str( Platform() )

all_libs = ["zlib", "physfs", "ogg", "vorbis", "vorbisfile", "expat", "glfw", "enet"]

isdebug = ARGUMENTS.get('debug', 0) # debug=1 ?

if isdebug:
  suffix = "_d"
  builddir = "Debug"

else:
  suffix = ""
  builddir = "Release"

if p == "win32":
  env = Environment( tools = ["masm", "msvc", "msvs", "mslib", "mslink"] )
  env.Append( CPPDEFINES = ["_CRT_SECURE_NO_DEPRECATE", "WIN32", "_LIB"] )

  if isdebug:
    env.Append( CCFLAGS    = ["/Od", "/MTd", "/EHsc", "/Z7"] )
    env.Append( CPPDEFINES = ["_DEBUG"] )

  else:
    env.Append( CCFLAGS    = ["/O2", "/Ot", "/GL", "/FD", "/MT", "/GS-"] )
    env.Append( ARFLAGS    = ["/LTCG"] )
    env.Append( CPPDEFINES = ["NDEBUG"] )

elif p == "darwin":

  env = Environment( tools = ["gcc", "ar", "link"], ENV = os.environ)
  env.Append( CPPDEFINES = ["_LIB"] )

  if isdebug:
    env.Append( CCFLAGS   = Split("-O0 -g -pipe") )
    env.Append( CPPDEFINES = ["_DEBUG"] )

  else:
    env.Append( CCFLAGS   = Split("""-pipe
                                     -Os
                                     -fvisibility=hidden
                                     -mmacosx-version-min=10.4
                                     -mdynamic-no-pic
                                     -isysroot /Developer/SDKs/MacOSX10.4u.sdk""") )
    env.Append( CPPDEFINES = ["NDEBUG"] )

elif p == "posix":

  env = Environment( tools = ["gcc", "ar", "link"], ENV = os.environ)
  env.Append( CPPDEFINES = ["_LIB"] )

  if isdebug:
    env.Append( CCFLAGS   = Split("-O0 -g -pipe") )
    env.Append( CPPDEFINES = ["_DEBUG"] )

  else:
    env.Append( CCFLAGS   = Split("-Os -pipe") )
    env.Append( CPPDEFINES = ["NDEBUG"] )

else:
  raise "Not Implemented!"

env.Append( CPPPATH = ["#include"])

lib = "#lib"


if p == "darwin":

  e = env.Copy()
  s = suffix
  env.Append( CCFLAGS   = Split("-arch ppc -mtune=G5") )
  suffix = s + "_ppc"

  for project in all_libs:
    SConscript("src/" + project + ".SConscript", 
               exports="env lib suffix", 
               build_dir = builddir + "_ppc",
               duplicate=0)


  env = e
  env.Append( CCFLAGS   = Split("-arch i386") )
  suffix = s + "_i386"
  for project in all_libs:
    SConscript("src/" + project + ".SConscript", 
               exports="env lib suffix", 
               build_dir = builddir + "_i386",
               duplicate=0)

else:
  
  for project in all_libs:
    SConscript("src/" + project + ".SConscript", 
               exports="env lib suffix", 
               build_dir = builddir,
               duplicate=0)
